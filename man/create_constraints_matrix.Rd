% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Func.R
\name{create_constraints_matrix}
\alias{create_constraints_matrix}
\title{creates a constraint matrix for solving a minimum cost flow
problem given a set of edges as data frame in the following format:
- edge_id (primary key)
- node_from (foreign key)
- node_to (foreign key)
- edge_capacity (int)
- edge_cost (int)
Assumptions:
- source node is the node with the lowest ID
- target node is the node with the highest ID}
\usage{
create_constraints_matrix(edges, total_flow)
}
\arguments{
\item{edges}{a data frame with the edge list}

\item{total_flow}{a numeric value for the total flow}
}
\value{
Creates constraint matrix dataset, this is a list with three elements:
- lhs = the left side of the optimization equation (coefficients)
- dir = the condition operation, i.e. '>=', '==', or '<='
- rhs = the constraint value
}
\description{
creates a constraint matrix for solving a minimum cost flow
problem given a set of edges as data frame in the following format:
- edge_id (primary key)
- node_from (foreign key)
- node_to (foreign key)
- edge_capacity (int)
- edge_cost (int)
Assumptions:
- source node is the node with the lowest ID
- target node is the node with the highest ID
}
\author{
Derek Corcoran <derek.corcoran.barrios@gmail.com>

Laurens Geffert <laurensgeffert@gmail.com>
Flow through each edge should not be larger than capacity.
We create one constraint for each edge. All coefficients zero
except the ones of the edge in question as one, with a constraint
that the result is smaller than or equal to capacity of that edge.
TODO: We may be able to take this out if we are using node capacity constraints
No node except for the source and target node should retain any flow.
Therefore, the sum of all inputs and outputs for these nodes should be
zero. We can force this by going through all nodes and identifying their
edges. The inbound edges are assigned a coefficient of 1 and the outbound
edges a coefficients of -1. Any viable solution should achieve a result
equal to zero, i.e. inputs equal to outputs for all nodes (except S and T).
In this particular case we want the flow through each node to be smaller
than or equal to 1 so that the number of chains is preserved. We add this
constraint in a very similar way to the node flow constraints
For the source and the target node, we want all outbound nodes and
all inbound nodes to be equal to the sum of flow through the network
respectively
}
